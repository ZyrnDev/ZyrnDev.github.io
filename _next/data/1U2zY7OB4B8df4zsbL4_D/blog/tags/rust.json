{"pageProps":{"tag":{"name":"rust","posts":[{"filename":"a-coding-season","preview":"This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on Advent of Code 2020. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the pro...","title":"A Coding Season","date":"2020-12-19","author":"Zyrn","published":true,"tags":["Advent of Code","rust","data structures","algorithms"],"content":"<p>This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on <a href=https://adventofcode.com/2020>Advent of Code 2020</a>. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the progression.</p>\n<p>Each challenge can take anywhere from 20 minutes to a few hours to solve both parts of. This year I decided to take the challenge in <a href=\"https://www.rust-lang.org/\">Rust</a> which helped me to greatly gain a depth of knowledge in this language as I used many different data structures and algorithms.</p>\n<p>Rust allowed for some very clean solutions with both its advanced iterator support and operator overloading for structs (Rust's take on OOP).\nFor example, look at the simplicity of <a href=\"https://adventofcode.com/2020/day/3\">day 3</a>'s solutions with the structs and operator overloading removed.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>p<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>total<span class=\"token punctuation\">,</span> val<span class=\"token closure-punctuation punctuation\">|</span></span> total <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Grid</span><span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">{</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">%</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            counter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// println!(\"Char: {}, X: {}, Y: {}\", grid.map[pos.y][pos.x], pos.x, pos.y);</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    counter\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br></br>\nWhile other times, mutability issues and the minimum string manipulation tools resulted in string parsing looking like this unreadable and slow code taken from my <a href=\"https://adventofcode.com/2020/day/7\">day 7</a> solution:</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> bag<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// .map(|(style, list)| { style.clone().split_off(style.len()-5); (style, list.iter().map(|s| { s.split_off(s.len()-5); s }).collect::&#x3C;Vec&#x3C;&#x26;String>>()) })</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> style <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s <span class=\"token operator\">!=</span> <span class=\"token operator\">&#x26;</span><span class=\"token string\">\"no other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>style<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token function\">build_tree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>child<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">tree_contains</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shiny gold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Overall, this gave me a great opportunity to dive deeper into Rust and practice solve complex problems.</p>\n<p>Additionally, as you might have noticed in this post, I have added syntax highlighted code snippets to this website using <a href=\"https://prismjs.com/\">Prism.js</a>. So hopefully I will be able to do some post where I get into the details of my code a little more.</p>\n<p>See you next year with my January update!</p>\n"},{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"say-what","preview":"For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.\nThis was a simple implementation of a language wh...","title":"Say What?","date":"2021-01-25","author":"Zyrn","published":true,"tags":["language development","rust","llvm"],"content":"<p>For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.</p>\n<p>This was a simple implementation of a language which I had only barely started lexing.\nThe only thing I can be proud of with that implementation was the fact that I used my own butcher form of EBNF document to define the language's syntax.\nAfter getting a rather ugly lexing system going I realised I had no clue what comes next.</p>\n<p>At this point I started searching for resources online which I could learn from.\nWith some help from a friend I was able to find <a href=\"https://craftinginterpreters.com/\">'Crafting Interpreters'</a> an electronic book by Bob Nystrom (<a href=\"https://twitter.com/intent/user?screen_name=munificentbob\">@munificentbob</a>).</p>\n<p>This book is an amazing resource and has allowed me to understand and build a whole language despite having next to no experience beforehand. So far, I have implemented lexing, parsing, a syntax tree, an execution environment and expression and statement evaluation.</p>\n<p>Additionally, while working through this book I have been working on my entirely separate language in Rust where I am working on the parsing phase.\nIdeally, I will be using <a href=\"https://llvm.org/\">LLVM</a> <a href=\"https://crates.io/crates/llvm-sys\">wrapper</a> for a compiler backend in list language so I am excited for that as I will get a programming language that might even be usable.</p>\n<p>Until then, wishing you a Happy New Year!</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]}},"__N_SSG":true}