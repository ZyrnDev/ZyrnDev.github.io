{"pageProps":{"filename":"autumn-advances","preview":"In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.\nThe first thing I targeted was responsiveness of...","title":"Autumn Advances","date":"2021-04-24","author":"Zyrn","published":true,"tags":["web development","test driven development","CI-CD","development operations"],"content":"<p>In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.</p>\n<p>The first thing I targeted was responsiveness of the website. This was important as the old design was created with a mobile first-approach, but since the website wasn't responsive this didn't look good on desktop. So, I started by making the website responsive, with a clear separate layout for the desktop version. I achieved this by using <a href=\"https://www.npmjs.com/package/react-responsive\" title=\"NPM react-responsive\">react-responsive</a> which allows you to use CSS media queries as React.js hooks which I implemented in two different ways. Firstly, this method (inspired by <a href=\"https://github.com/benawad/dogehouse\" title=\"DogeHouse Github\">Ben Awad's DogeHouse</a>) allowed me display extra content in a second column if the viewport was large enough. Secondly, I reduced the width of page content relative to the viewport when the viewport was larger.</p>\n<p><img src=\"/images/autumn_advances/single_column.png\" alt=\"Mobile Layout\" title=\"Mobile Layout\">\n<img src=\"/images/autumn_advances/two_columns.png\" alt=\"Desktop Layout\" title=\"Desktop Layout\"></p>\n<p>The next major component I worked on was setting up a staging site. This was motivated by my desire to allow some of my friends to give feedback on some of my changes, before I pushed the code to production without requiring them to setup a development environment. To do this I added a staging/development CI/CD pipeline to deploy code to a <a href=\"https://staging.zyrn.dev\" title=\"Zyrn.Dev Staging Environment\">staging site</a>.</p>\n<p>While I was already updating the workflows for this project, I added automated builds &#x26; testing on all branches that didn't already have it. However, this process tended to be a bit too slow for a <a href=\"https://www.codecademy.com/articles/tdd-red-green-refactor\" title=\"Test-Driven Development: Red, Green, Refactor\">TDD Red, Green, Refactor</a> approach, so I added dependency caching to the build process. This allowed me to build the faster, more reliable, and consistent code.</p>\n<p><img src=\"https://content.codecademy.com/programs/tdd-js/articles/red-green-refactor-tdd.png\" alt=\"Red, Green, Refactor TDD\" title=\"Red, Green, Refactor\"></p>\n<p>Until next time, happy coding!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n        max-height: 25rem;\n    }\n</style>\n"},"__N_SSG":true}