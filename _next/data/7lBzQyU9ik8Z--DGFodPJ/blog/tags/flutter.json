{"pageProps":{"tag":{"name":"flutter","posts":[{"filename":"a-fluttering-experience","preview":"\nThis month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about build...","title":"A Fluttering Experience","date":"2020-11-18","author":"Zyrn","published":true,"tags":["mobile applications","flutter","dart","javascript","nodejs"],"content":"<style>\n    div.screenshot-image-view {\n        text-align: center;\n    }\n    div.screenshot-image-view img {\n        max-height: 600px;\n        padding: 2px;\n        border-radius: 40px;\n    }\n</style>\n<p>This month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about building an app to do schedule reminders for various things, by sending push notifications straight to my phone.</p>\n<p>To develop this, I first started looking at different tools, frameworks, and languages for mobile (Android) development. One of my main criteria for selection was how simple the support to hand push notifications was going to be. In the end I decided on using applications framework which supports mobile and web using <a href=\"https://dart.dev/\">Dart</a>.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/zyrn_notifications/home_screen.png\"/>\n    <img src=\"/images/zyrn_notifications/settings_screen.png\"/>\n</div>\n<p>Now that my frontend was decided, I need a backend and database, for this I used <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://expressjs.com/\">Express.js</a> and <a href=\"https://www.sqlite.org/index.html\">SQLite3</a> as there is good support for using Google’s services in Node.js namely their push notifications via <a href=\"https://firebase.google.com/\">Firebase</a>. SQLite3 was a lightweight SQL database which I had heard of and wanted to try out for a small project such as this. Combined I built a simplistic REST API with authentication via pre-shared tokens. This meant I could be more relaxed on security as I did not have to setup a whole authentication system and carefully ensure that there were no SQL injection vulnerabilities as I could choose who I distributed access to.</p>\n<p>While working on this I was able to start learning Dart, a new language to me while making a basic application which allowed me to subscribe to be notified about various topics when required.</p>\n<p>Overall a great learning experience, if you are interested in getting access to <a href=\"https://play.google.com/store/apps/details?id=dev.zyrn.notifications\">the app</a> or checking out the source code make sure to contact me.</p>\n<p>I’ll see you again next month, until then happy coding!</p>\n"},{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"}]}},"__N_SSG":true}