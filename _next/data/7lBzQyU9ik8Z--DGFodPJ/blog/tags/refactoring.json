{"pageProps":{"tag":{"name":"refactoring","posts":[{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"},{"filename":"typescript-transitions","preview":"During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to TypeScript.\nTypeScript has many features which justified the effort required in the write, suc...","title":"Typescript Transitions","date":"2021-05-25","author":"Zyrn","published":true,"tags":["web development","typescript","refactoring"],"content":"<p>During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>.</p>\n<p><a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> has many features which justified the effort required in the write, such as the improved ability for code completion, intellisense, <a href=\"https://github.com/typescript-eslint/typescript-eslint\" title=\"Type Checking: TypeScript ESLint\">type checking</a>, and more thanks largely to the additional tooling available in most IDEs for <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>. These benefits allow me to write cleaner, more robust, easy to use code at a quicker pace.</p>\n<iframe width=\"560\" height=\"315\" margin=\"auto\" style=\"margin: auto; display: block;\" src=\"https://www.youtube-nocookie.com/embed/ydkQlJhodio\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Since <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is really just a super-set of JavaScript, I have been able to keep upwards of 80% of the codebase between for both languages. This greatly reduces the amount of work required to update and maintain the website when compared to switching the programming langauge or framework. Another key benefit is that <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is still compitable with Javascript, so I could have done a gradual transition from Javascript to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>, such as that done by <a href=\"https://slack.engineering/typescript-at-slack/\" title=\"Slack&#x27;s Transition to Typescript\">Slack</a>. I didn't end up doing this as my code base is still small enough that I was able to complete the transition in a couple of days.</p>\n<p>The actual transition involved adding and creating type definitions for all the libraries I have been using, both internal and external. In addition, I have also have been adding explict type declarions to all the functions and variables that I have been using, where possible.</p>\n<p>One example of how adding typescript changed my code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> allPostsData<span class=\"token punctuation\">,</span> isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TypeScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  allPostsData<span class=\"token punctuation\">,</span>\n  isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">allPostsData</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PostMetaData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  isUnreleased<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you can see, adding type annotations makes the code a little more verbose, but it also makes it easier to read, understand and use correctly. In this way, I have been able to significantly reduce the amount of work required to update and maintain the website by greatly improving the developer experience.</p>\n<p>That's all for this month, I hope you enjoyed it!\nUntil next time</p>\n"}]}},"__N_SSG":true}