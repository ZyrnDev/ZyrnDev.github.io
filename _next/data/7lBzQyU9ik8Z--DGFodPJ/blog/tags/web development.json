{"pageProps":{"tag":{"name":"web development","posts":[{"filename":"autumn-advances","preview":"In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.\nThe first thing I targeted was responsiveness of...","title":"Autumn Advances","date":"2021-04-24","author":"Zyrn","published":true,"tags":["web development","test driven development","CI-CD","development operations"],"content":"<p>In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.</p>\n<p>The first thing I targeted was responsiveness of the website. This was important as the old design was created with a mobile first-approach, but since the website wasn't responsive this didn't look good on desktop. So, I started by making the website responsive, with a clear separate layout for the desktop version. I achieved this by using <a href=\"https://www.npmjs.com/package/react-responsive\" title=\"NPM react-responsive\">react-responsive</a> which allows you to use CSS media queries as React.js hooks which I implemented in two different ways. Firstly, this method (inspired by <a href=\"https://github.com/benawad/dogehouse\" title=\"DogeHouse Github\">Ben Awad's DogeHouse</a>) allowed me display extra content in a second column if the viewport was large enough. Secondly, I reduced the width of page content relative to the viewport when the viewport was larger.</p>\n<p><img src=\"/images/autumn_advances/single_column.png\" alt=\"Mobile Layout\" title=\"Mobile Layout\">\n<img src=\"/images/autumn_advances/two_columns.png\" alt=\"Desktop Layout\" title=\"Desktop Layout\"></p>\n<p>The next major component I worked on was setting up a staging site. This was motivated by my desire to allow some of my friends to give feedback on some of my changes, before I pushed the code to production without requiring them to setup a development environment. To do this I added a staging/development CI/CD pipeline to deploy code to a <a href=\"https://staging.zyrn.dev\" title=\"Zyrn.Dev Staging Environment\">staging site</a>.</p>\n<p>While I was already updating the workflows for this project, I added automated builds &#x26; testing on all branches that didn't already have it. However, this process tended to be a bit too slow for a <a href=\"https://www.codecademy.com/articles/tdd-red-green-refactor\" title=\"Test-Driven Development: Red, Green, Refactor\">TDD Red, Green, Refactor</a> approach, so I added dependency caching to the build process. This allowed me to build the faster, more reliable, and consistent code.</p>\n<p><img src=\"https://content.codecademy.com/programs/tdd-js/articles/red-green-refactor-tdd.png\" alt=\"Red, Green, Refactor TDD\" title=\"Red, Green, Refactor\"></p>\n<p>Until next time, happy coding!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n        max-height: 25rem;\n    }\n</style>\n"},{"filename":"typescript-transitions","preview":"During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to TypeScript.\nTypeScript has many features which justified the effort required in the write, suc...","title":"Typescript Transitions","date":"2021-05-25","author":"Zyrn","published":true,"tags":["web development","typescript","refactoring"],"content":"<p>During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>.</p>\n<p><a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> has many features which justified the effort required in the write, such as the improved ability for code completion, intellisense, <a href=\"https://github.com/typescript-eslint/typescript-eslint\" title=\"Type Checking: TypeScript ESLint\">type checking</a>, and more thanks largely to the additional tooling available in most IDEs for <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>. These benefits allow me to write cleaner, more robust, easy to use code at a quicker pace.</p>\n<iframe width=\"560\" height=\"315\" margin=\"auto\" style=\"margin: auto; display: block;\" src=\"https://www.youtube-nocookie.com/embed/ydkQlJhodio\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Since <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is really just a super-set of JavaScript, I have been able to keep upwards of 80% of the codebase between for both languages. This greatly reduces the amount of work required to update and maintain the website when compared to switching the programming langauge or framework. Another key benefit is that <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is still compitable with Javascript, so I could have done a gradual transition from Javascript to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>, such as that done by <a href=\"https://slack.engineering/typescript-at-slack/\" title=\"Slack&#x27;s Transition to Typescript\">Slack</a>. I didn't end up doing this as my code base is still small enough that I was able to complete the transition in a couple of days.</p>\n<p>The actual transition involved adding and creating type definitions for all the libraries I have been using, both internal and external. In addition, I have also have been adding explict type declarions to all the functions and variables that I have been using, where possible.</p>\n<p>One example of how adding typescript changed my code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> allPostsData<span class=\"token punctuation\">,</span> isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TypeScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  allPostsData<span class=\"token punctuation\">,</span>\n  isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">allPostsData</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PostMetaData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  isUnreleased<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you can see, adding type annotations makes the code a little more verbose, but it also makes it easier to read, understand and use correctly. In this way, I have been able to significantly reduce the amount of work required to update and maintain the website by greatly improving the developer experience.</p>\n<p>That's all for this month, I hope you enjoyed it!\nUntil next time</p>\n"}]}},"__N_SSG":true}