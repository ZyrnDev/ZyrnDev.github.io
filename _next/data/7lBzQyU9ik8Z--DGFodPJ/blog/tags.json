{"pageProps":{"tags":[{"name":"javascript","posts":[{"filename":"a-fluttering-experience","preview":"\nThis month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about build...","title":"A Fluttering Experience","date":"2020-11-18","author":"Zyrn","published":true,"tags":["mobile applications","flutter","dart","javascript","nodejs"],"content":"<style>\n    div.screenshot-image-view {\n        text-align: center;\n    }\n    div.screenshot-image-view img {\n        max-height: 600px;\n        padding: 2px;\n        border-radius: 40px;\n    }\n</style>\n<p>This month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about building an app to do schedule reminders for various things, by sending push notifications straight to my phone.</p>\n<p>To develop this, I first started looking at different tools, frameworks, and languages for mobile (Android) development. One of my main criteria for selection was how simple the support to hand push notifications was going to be. In the end I decided on using applications framework which supports mobile and web using <a href=\"https://dart.dev/\">Dart</a>.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/zyrn_notifications/home_screen.png\"/>\n    <img src=\"/images/zyrn_notifications/settings_screen.png\"/>\n</div>\n<p>Now that my frontend was decided, I need a backend and database, for this I used <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://expressjs.com/\">Express.js</a> and <a href=\"https://www.sqlite.org/index.html\">SQLite3</a> as there is good support for using Google’s services in Node.js namely their push notifications via <a href=\"https://firebase.google.com/\">Firebase</a>. SQLite3 was a lightweight SQL database which I had heard of and wanted to try out for a small project such as this. Combined I built a simplistic REST API with authentication via pre-shared tokens. This meant I could be more relaxed on security as I did not have to setup a whole authentication system and carefully ensure that there were no SQL injection vulnerabilities as I could choose who I distributed access to.</p>\n<p>While working on this I was able to start learning Dart, a new language to me while making a basic application which allowed me to subscribe to be notified about various topics when required.</p>\n<p>Overall a great learning experience, if you are interested in getting access to <a href=\"https://play.google.com/store/apps/details?id=dev.zyrn.notifications\">the app</a> or checking out the source code make sure to contact me.</p>\n<p>I’ll see you again next month, until then happy coding!</p>\n"},{"filename":"all-the-little-projects","preview":"Since my last update I haven't made all too much that I wanted to share, but I still wanted to share my month with you.\nI have continued to work with ray tracing and WebGL but I have sort of lost a bit of my motivation so I will be putting that project on hold.\nThis has kind of been the theme of ...","title":"All the Little Projects","date":"2020-09-19","author":"Zyrn","published":true,"tags":["docker","javascript","nodejs"],"content":"<p>Since my last update I haven't made all too much that I wanted to share, but I still wanted to share my month with you.</p>\n<p>I have continued to work with ray tracing and WebGL but I have sort of lost a bit of my motivation so I will be putting that project on hold.\nThis has kind of been the theme of the last month, starting a project losing interest and starting something else.</p>\n<p>After pressing pause on ray tracing I started to learn about a containerisation tool called <a href=\"https://www.docker.com/\">Docker</a>. After using the basic features I started learning how to use docker compose to build complex projects which could be set up on a new computer in minutes. This allows for very simple horizonal scaling applications, my first one of these was to get a <a href=\"https://www.mysql.com/\">MySQL</a> database running with <a href=\"https://expressjs.com/\">Express.js</a> web server which could send me simple reminder through a messaging platform called <a href=\"https://discord.com/\">Discord</a> using a API wrapper called <a href=\"https://discord.js.org/\">Discord.js</a>.</p>\n<p>My goal for this project was to be able to set and send reminders for myself of when I should go to bed, along with other reminders I or my friends might need.\nI was able to get a base application and framework setup, but lost interest on this after I built out the initial features.\nFollowing this I worked on a bunch of little programs, the most notable of the bunch being a parser/lexer in Rust for my langauge, a project I have talked about previously on this blog.</p>\n<p>All in all, this was a pretty light month for my hobby projects, but I was able to learn some key skills in using Docker.</p>\n<p>Can't wait to show you what I do next month!</p>\n"},{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]},{"name":"rust","posts":[{"filename":"a-coding-season","preview":"This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on Advent of Code 2020. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the pro...","title":"A Coding Season","date":"2020-12-19","author":"Zyrn","published":true,"tags":["Advent of Code","rust","data structures","algorithms"],"content":"<p>This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on <a href=https://adventofcode.com/2020>Advent of Code 2020</a>. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the progression.</p>\n<p>Each challenge can take anywhere from 20 minutes to a few hours to solve both parts of. This year I decided to take the challenge in <a href=\"https://www.rust-lang.org/\">Rust</a> which helped me to greatly gain a depth of knowledge in this language as I used many different data structures and algorithms.</p>\n<p>Rust allowed for some very clean solutions with both its advanced iterator support and operator overloading for structs (Rust's take on OOP).\nFor example, look at the simplicity of <a href=\"https://adventofcode.com/2020/day/3\">day 3</a>'s solutions with the structs and operator overloading removed.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>p<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>total<span class=\"token punctuation\">,</span> val<span class=\"token closure-punctuation punctuation\">|</span></span> total <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Grid</span><span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">{</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">%</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            counter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// println!(\"Char: {}, X: {}, Y: {}\", grid.map[pos.y][pos.x], pos.x, pos.y);</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    counter\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br></br>\nWhile other times, mutability issues and the minimum string manipulation tools resulted in string parsing looking like this unreadable and slow code taken from my <a href=\"https://adventofcode.com/2020/day/7\">day 7</a> solution:</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> bag<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// .map(|(style, list)| { style.clone().split_off(style.len()-5); (style, list.iter().map(|s| { s.split_off(s.len()-5); s }).collect::&#x3C;Vec&#x3C;&#x26;String>>()) })</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> style <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s <span class=\"token operator\">!=</span> <span class=\"token operator\">&#x26;</span><span class=\"token string\">\"no other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>style<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token function\">build_tree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>child<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">tree_contains</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shiny gold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Overall, this gave me a great opportunity to dive deeper into Rust and practice solve complex problems.</p>\n<p>Additionally, as you might have noticed in this post, I have added syntax highlighted code snippets to this website using <a href=\"https://prismjs.com/\">Prism.js</a>. So hopefully I will be able to do some post where I get into the details of my code a little more.</p>\n<p>See you next year with my January update!</p>\n"},{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"say-what","preview":"For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.\nThis was a simple implementation of a language wh...","title":"Say What?","date":"2021-01-25","author":"Zyrn","published":true,"tags":["language development","rust","llvm"],"content":"<p>For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.</p>\n<p>This was a simple implementation of a language which I had only barely started lexing.\nThe only thing I can be proud of with that implementation was the fact that I used my own butcher form of EBNF document to define the language's syntax.\nAfter getting a rather ugly lexing system going I realised I had no clue what comes next.</p>\n<p>At this point I started searching for resources online which I could learn from.\nWith some help from a friend I was able to find <a href=\"https://craftinginterpreters.com/\">'Crafting Interpreters'</a> an electronic book by Bob Nystrom (<a href=\"https://twitter.com/intent/user?screen_name=munificentbob\">@munificentbob</a>).</p>\n<p>This book is an amazing resource and has allowed me to understand and build a whole language despite having next to no experience beforehand. So far, I have implemented lexing, parsing, a syntax tree, an execution environment and expression and statement evaluation.</p>\n<p>Additionally, while working through this book I have been working on my entirely separate language in Rust where I am working on the parsing phase.\nIdeally, I will be using <a href=\"https://llvm.org/\">LLVM</a> <a href=\"https://crates.io/crates/llvm-sys\">wrapper</a> for a compiler backend in list language so I am excited for that as I will get a programming language that might even be usable.</p>\n<p>Until then, wishing you a Happy New Year!</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]},{"name":"nodejs","posts":[{"filename":"a-fluttering-experience","preview":"\nThis month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about build...","title":"A Fluttering Experience","date":"2020-11-18","author":"Zyrn","published":true,"tags":["mobile applications","flutter","dart","javascript","nodejs"],"content":"<style>\n    div.screenshot-image-view {\n        text-align: center;\n    }\n    div.screenshot-image-view img {\n        max-height: 600px;\n        padding: 2px;\n        border-radius: 40px;\n    }\n</style>\n<p>This month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about building an app to do schedule reminders for various things, by sending push notifications straight to my phone.</p>\n<p>To develop this, I first started looking at different tools, frameworks, and languages for mobile (Android) development. One of my main criteria for selection was how simple the support to hand push notifications was going to be. In the end I decided on using applications framework which supports mobile and web using <a href=\"https://dart.dev/\">Dart</a>.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/zyrn_notifications/home_screen.png\"/>\n    <img src=\"/images/zyrn_notifications/settings_screen.png\"/>\n</div>\n<p>Now that my frontend was decided, I need a backend and database, for this I used <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://expressjs.com/\">Express.js</a> and <a href=\"https://www.sqlite.org/index.html\">SQLite3</a> as there is good support for using Google’s services in Node.js namely their push notifications via <a href=\"https://firebase.google.com/\">Firebase</a>. SQLite3 was a lightweight SQL database which I had heard of and wanted to try out for a small project such as this. Combined I built a simplistic REST API with authentication via pre-shared tokens. This meant I could be more relaxed on security as I did not have to setup a whole authentication system and carefully ensure that there were no SQL injection vulnerabilities as I could choose who I distributed access to.</p>\n<p>While working on this I was able to start learning Dart, a new language to me while making a basic application which allowed me to subscribe to be notified about various topics when required.</p>\n<p>Overall a great learning experience, if you are interested in getting access to <a href=\"https://play.google.com/store/apps/details?id=dev.zyrn.notifications\">the app</a> or checking out the source code make sure to contact me.</p>\n<p>I’ll see you again next month, until then happy coding!</p>\n"},{"filename":"all-the-little-projects","preview":"Since my last update I haven't made all too much that I wanted to share, but I still wanted to share my month with you.\nI have continued to work with ray tracing and WebGL but I have sort of lost a bit of my motivation so I will be putting that project on hold.\nThis has kind of been the theme of ...","title":"All the Little Projects","date":"2020-09-19","author":"Zyrn","published":true,"tags":["docker","javascript","nodejs"],"content":"<p>Since my last update I haven't made all too much that I wanted to share, but I still wanted to share my month with you.</p>\n<p>I have continued to work with ray tracing and WebGL but I have sort of lost a bit of my motivation so I will be putting that project on hold.\nThis has kind of been the theme of the last month, starting a project losing interest and starting something else.</p>\n<p>After pressing pause on ray tracing I started to learn about a containerisation tool called <a href=\"https://www.docker.com/\">Docker</a>. After using the basic features I started learning how to use docker compose to build complex projects which could be set up on a new computer in minutes. This allows for very simple horizonal scaling applications, my first one of these was to get a <a href=\"https://www.mysql.com/\">MySQL</a> database running with <a href=\"https://expressjs.com/\">Express.js</a> web server which could send me simple reminder through a messaging platform called <a href=\"https://discord.com/\">Discord</a> using a API wrapper called <a href=\"https://discord.js.org/\">Discord.js</a>.</p>\n<p>My goal for this project was to be able to set and send reminders for myself of when I should go to bed, along with other reminders I or my friends might need.\nI was able to get a base application and framework setup, but lost interest on this after I built out the initial features.\nFollowing this I worked on a bunch of little programs, the most notable of the bunch being a parser/lexer in Rust for my langauge, a project I have talked about previously on this blog.</p>\n<p>All in all, this was a pretty light month for my hobby projects, but I was able to learn some key skills in using Docker.</p>\n<p>Can't wait to show you what I do next month!</p>\n"},{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]},{"name":"docker","posts":[{"filename":"all-the-little-projects","preview":"Since my last update I haven't made all too much that I wanted to share, but I still wanted to share my month with you.\nI have continued to work with ray tracing and WebGL but I have sort of lost a bit of my motivation so I will be putting that project on hold.\nThis has kind of been the theme of ...","title":"All the Little Projects","date":"2020-09-19","author":"Zyrn","published":true,"tags":["docker","javascript","nodejs"],"content":"<p>Since my last update I haven't made all too much that I wanted to share, but I still wanted to share my month with you.</p>\n<p>I have continued to work with ray tracing and WebGL but I have sort of lost a bit of my motivation so I will be putting that project on hold.\nThis has kind of been the theme of the last month, starting a project losing interest and starting something else.</p>\n<p>After pressing pause on ray tracing I started to learn about a containerisation tool called <a href=\"https://www.docker.com/\">Docker</a>. After using the basic features I started learning how to use docker compose to build complex projects which could be set up on a new computer in minutes. This allows for very simple horizonal scaling applications, my first one of these was to get a <a href=\"https://www.mysql.com/\">MySQL</a> database running with <a href=\"https://expressjs.com/\">Express.js</a> web server which could send me simple reminder through a messaging platform called <a href=\"https://discord.com/\">Discord</a> using a API wrapper called <a href=\"https://discord.js.org/\">Discord.js</a>.</p>\n<p>My goal for this project was to be able to set and send reminders for myself of when I should go to bed, along with other reminders I or my friends might need.\nI was able to get a base application and framework setup, but lost interest on this after I built out the initial features.\nFollowing this I worked on a bunch of little programs, the most notable of the bunch being a parser/lexer in Rust for my langauge, a project I have talked about previously on this blog.</p>\n<p>All in all, this was a pretty light month for my hobby projects, but I was able to learn some key skills in using Docker.</p>\n<p>Can't wait to show you what I do next month!</p>\n"},{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]},{"name":"development operations","posts":[{"filename":"autumn-advances","preview":"In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.\nThe first thing I targeted was responsiveness of...","title":"Autumn Advances","date":"2021-04-24","author":"Zyrn","published":true,"tags":["web development","test driven development","CI-CD","development operations"],"content":"<p>In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.</p>\n<p>The first thing I targeted was responsiveness of the website. This was important as the old design was created with a mobile first-approach, but since the website wasn't responsive this didn't look good on desktop. So, I started by making the website responsive, with a clear separate layout for the desktop version. I achieved this by using <a href=\"https://www.npmjs.com/package/react-responsive\" title=\"NPM react-responsive\">react-responsive</a> which allows you to use CSS media queries as React.js hooks which I implemented in two different ways. Firstly, this method (inspired by <a href=\"https://github.com/benawad/dogehouse\" title=\"DogeHouse Github\">Ben Awad's DogeHouse</a>) allowed me display extra content in a second column if the viewport was large enough. Secondly, I reduced the width of page content relative to the viewport when the viewport was larger.</p>\n<p><img src=\"/images/autumn_advances/single_column.png\" alt=\"Mobile Layout\" title=\"Mobile Layout\">\n<img src=\"/images/autumn_advances/two_columns.png\" alt=\"Desktop Layout\" title=\"Desktop Layout\"></p>\n<p>The next major component I worked on was setting up a staging site. This was motivated by my desire to allow some of my friends to give feedback on some of my changes, before I pushed the code to production without requiring them to setup a development environment. To do this I added a staging/development CI/CD pipeline to deploy code to a <a href=\"https://staging.zyrn.dev\" title=\"Zyrn.Dev Staging Environment\">staging site</a>.</p>\n<p>While I was already updating the workflows for this project, I added automated builds &#x26; testing on all branches that didn't already have it. However, this process tended to be a bit too slow for a <a href=\"https://www.codecademy.com/articles/tdd-red-green-refactor\" title=\"Test-Driven Development: Red, Green, Refactor\">TDD Red, Green, Refactor</a> approach, so I added dependency caching to the build process. This allowed me to build the faster, more reliable, and consistent code.</p>\n<p><img src=\"https://content.codecademy.com/programs/tdd-js/articles/red-green-refactor-tdd.png\" alt=\"Red, Green, Refactor TDD\" title=\"Red, Green, Refactor\"></p>\n<p>Until next time, happy coding!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n        max-height: 25rem;\n    }\n</style>\n"},{"filename":"migration","preview":"It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with OVH as I talked about in my last post.\nThis new ...","title":"Migration - We're Live!","date":"2020-06-20","author":"Zyrn","published":true,"tags":["cloud","nginx","development operations","react"],"content":"<p>It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with <a href=\"https://www.ovh.com/\">OVH</a> as I talked about in my last post.</p>\n<p>This new server required significant setup before I could deploy to it. One key task was to setup a SSH connection and then install and configure <a href=\"https://www.nginx.com\">Nginx</a> as both a static file server and a reverse proxy. Once I had optimised the settings for my CDN (Content Delivery Network) I was read to deploy and change my DNS records to point to the newly deployed site.</p>\n<p>After a week after I switched sites, I decided to port some of the old site's functionality across as I haven't had any major issues yet.\nTo begin with I have ported across my file server which allows me to easily share files and bypass upload restrictions. I have currently got all the functionality there for the file server, but it still needs to be revisited as some of the UI is not clear and clean.</p>\n<p>I will be working hard until next time to give you all another update!</p>\n"},{"filename":"pipelines-CI-CD","preview":"Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using Github Actions. Along side these CI / CD additions I also mov...","title":"Pipelines: CI/CD","date":"2021-02-17","author":"Zyrn","published":true,"tags":["CI-CD","development operations","Github Actions","Raspberry Pi"],"content":"<p>Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using <a href=\"https://github.com/features/actions\" title=\"Github Actions Product Page\">Github Actions</a>. Along side these CI / CD additions I also moved the repository for this project to my main Github account.</p>\n<p><img src=\"/images/pipelines_ci_cd/actions_logs.png\" alt=\"Actions Log\" title=\"Github Actions History\"></p>\n<p>To start with I just setup basic CI which simply confirmed that PRs and commits to master branch would correctly install and build from a fresh setup. I then supplemented this with setting up a local Github actions runner for that repository which run on my <a href=\"https://github.com/appleboy/ssh-action\" title=\"Original SSH-Action Project by Appleboy on Github\">Raspberry Pi 4</a>, as my project is private on Github (allowing me unlimited monthly runtime for my actions). My next step was to build out the CD component, which I decided to use a simple SSH command for in combination with some <a href=\"https://www.raspberrypi.org/products/raspberry-pi-4-model-b\" title=\"Raspberry Pi Foundation&#x27;s Product Page\">Github secrets</a>.</p>\n<p><img src=\"https://assets.raspberrypi.com/static/raspberry-pi-4-labelled-e7f2e1d0bd4acdae2368c7ebd7b2028f.png\" alt=\"Raspberry Pi 4 Model B\" title=\"Raspberry Pi 4 Model B\"></p>\n<p>However, this design while simple ended up posing some rather annoying issues. The main issue I was encountering was the difficulty of connecting securely to another machine securely. After significant research I found this action on the Github marketplace called <a href=\"https://docs.github.com/en/actions/reference/encrypted-secrets\" title=\"Github Secrets Documentation\">SSH Action</a>. This library allows you to execute commands via SSH in a Github actions workflow. This is particularly useful as it means I do not have to change any of my existing deployment processes as I can simply automate my normal work exactly as it I do it manually.</p>\n<p>There was one small issue with this Github action, the docker image the bulk of the execution was done in was not available for all platforms, most importantly ARMv8/ARM64/AArch64 which I use in my 64-bit Raspberry Pi. Since <a href=\"https://github.com/appleboy\" title=\"Appleboy&#x27;s Github\">appleboy</a> provides it with a MIT license, so I forked it and substituted the problematic docker image for an equivalent one with ARM support.</p>\n<p><img src=\"/images/pipelines_ci_cd/ssh_action.png\" alt=\"SSH Remote Commands\" title=\"SSH Action\"></p>\n<p>With a bit more work I was able to add build dependency caching and a simple deployment activity. The process was simple just connect to the server, update the repository, install dependencies, lint, build, test, and switch to the new version. This workflow as simple as it is, has already saved me lots of time that would have been spent logging on to servers and running tests.</p>\n<p>Overall, I feel like while I have only taken another small dip into the DevOps world, I have learned a lot. This has encouraged me to try my hand are more things in this space. Potentially, I might setup a mock / staging server in the coming months.</p>\n<p>Until then keep learning!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n    }\n</style>\n"}]},{"name":"react","posts":[{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"migration","preview":"It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with OVH as I talked about in my last post.\nThis new ...","title":"Migration - We're Live!","date":"2020-06-20","author":"Zyrn","published":true,"tags":["cloud","nginx","development operations","react"],"content":"<p>It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with <a href=\"https://www.ovh.com/\">OVH</a> as I talked about in my last post.</p>\n<p>This new server required significant setup before I could deploy to it. One key task was to setup a SSH connection and then install and configure <a href=\"https://www.nginx.com\">Nginx</a> as both a static file server and a reverse proxy. Once I had optimised the settings for my CDN (Content Delivery Network) I was read to deploy and change my DNS records to point to the newly deployed site.</p>\n<p>After a week after I switched sites, I decided to port some of the old site's functionality across as I haven't had any major issues yet.\nTo begin with I have ported across my file server which allows me to easily share files and bypass upload restrictions. I have currently got all the functionality there for the file server, but it still needs to be revisited as some of the UI is not clear and clean.</p>\n<p>I will be working hard until next time to give you all another update!</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]},{"name":"algorithms","posts":[{"filename":"a-coding-season","preview":"This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on Advent of Code 2020. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the pro...","title":"A Coding Season","date":"2020-12-19","author":"Zyrn","published":true,"tags":["Advent of Code","rust","data structures","algorithms"],"content":"<p>This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on <a href=https://adventofcode.com/2020>Advent of Code 2020</a>. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the progression.</p>\n<p>Each challenge can take anywhere from 20 minutes to a few hours to solve both parts of. This year I decided to take the challenge in <a href=\"https://www.rust-lang.org/\">Rust</a> which helped me to greatly gain a depth of knowledge in this language as I used many different data structures and algorithms.</p>\n<p>Rust allowed for some very clean solutions with both its advanced iterator support and operator overloading for structs (Rust's take on OOP).\nFor example, look at the simplicity of <a href=\"https://adventofcode.com/2020/day/3\">day 3</a>'s solutions with the structs and operator overloading removed.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>p<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>total<span class=\"token punctuation\">,</span> val<span class=\"token closure-punctuation punctuation\">|</span></span> total <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Grid</span><span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">{</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">%</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            counter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// println!(\"Char: {}, X: {}, Y: {}\", grid.map[pos.y][pos.x], pos.x, pos.y);</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    counter\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br></br>\nWhile other times, mutability issues and the minimum string manipulation tools resulted in string parsing looking like this unreadable and slow code taken from my <a href=\"https://adventofcode.com/2020/day/7\">day 7</a> solution:</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> bag<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// .map(|(style, list)| { style.clone().split_off(style.len()-5); (style, list.iter().map(|s| { s.split_off(s.len()-5); s }).collect::&#x3C;Vec&#x3C;&#x26;String>>()) })</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> style <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s <span class=\"token operator\">!=</span> <span class=\"token operator\">&#x26;</span><span class=\"token string\">\"no other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>style<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token function\">build_tree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>child<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">tree_contains</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shiny gold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Overall, this gave me a great opportunity to dive deeper into Rust and practice solve complex problems.</p>\n<p>Additionally, as you might have noticed in this post, I have added syntax highlighted code snippets to this website using <a href=\"https://prismjs.com/\">Prism.js</a>. So hopefully I will be able to do some post where I get into the details of my code a little more.</p>\n<p>See you next year with my January update!</p>\n"},{"filename":"ray-tracing","preview":"\nJust a quick note beforehand, I didn’t write up this post when I was working on this, so I have actually back dated this post to when I was working on it.\nSo another month has gone by and you must be wondering what have I been doing in all that time?\nRaytracing.\nWhat does that look like?\nIt look...","title":"Simple Ray Tracing","date":"2020-08-14","author":"Zyrn","published":true,"tags":["python","computer graphics","algorithms"],"content":"<style>\n    div.screenshot-image-view {\n        display: flex !important;\n        flex-direction: row;\n        flex-wrap: wrap;\n        align-items: stretch;\n        justify-content: center;\n        text-align: center;\n    }\n    \n    div.screenshot-image-view img {\n        max-width: 48%;\n        min-width: 350px;\n        padding: 2px;\n        border-radius: 10px;\n    }\n</style>\n<p>Just a quick note beforehand, I didn’t write up this post when I was working on this, so I have actually back dated this post to when I was working on it.</p>\n<p>So another month has gone by and you must be wondering what have I been doing in all that time?</p>\n<p><strong>Raytracing.</strong></p>\n<p>What does that look like?<br/>\nIt looks like this.</p>\n<img src=\"/images/ray_tracing/full_scene_4000x2000_100spp.png\" style=\"width: 100%; border-radius: 50px;\"/>\n<p>Now hopefully, after looking at that you think that it is as awesome as I thought it was seeing it the first time. Luckily, this was one of my projects I was able to work with a friend on. Together we worked through an amazing free book by Peter Shirley called <a href=\"https://raytracing.github.io/books/RayTracingInOneWeekend.html\">‘Ray Tracing in One Weekend’</a>. Following this tutorial we got a very simple tracing simulation going in Python in just one weekend as advertised. Once we completed this I did a bunch of renders of various scenes, so here are some final pictures and pictures from development.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/ray_tracing/ray_collisions.jpg\"/>\n    <img src=\"/images/ray_tracing/scenes.png\"/>\n    <img src=\"/images/ray_tracing/shadows_no_aa.png\"/>\n    <img src=\"/images/ray_tracing/materials_and_aa.png\"/>\n</div>\n<p>The main issue with this version of our ray tracing is it was very slow so I have just started to work on an implementation for the browser using WebGL to get utilize GPU compute for this expensive workload.\n<br/> (Reminder you can open the images to get a full size render)</p>\n<p>Once again stay tuned for next month’s update!</p>\n"}]},{"name":"mobile applications","posts":[{"filename":"a-fluttering-experience","preview":"\nThis month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about build...","title":"A Fluttering Experience","date":"2020-11-18","author":"Zyrn","published":true,"tags":["mobile applications","flutter","dart","javascript","nodejs"],"content":"<style>\n    div.screenshot-image-view {\n        text-align: center;\n    }\n    div.screenshot-image-view img {\n        max-height: 600px;\n        padding: 2px;\n        border-radius: 40px;\n    }\n</style>\n<p>This month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about building an app to do schedule reminders for various things, by sending push notifications straight to my phone.</p>\n<p>To develop this, I first started looking at different tools, frameworks, and languages for mobile (Android) development. One of my main criteria for selection was how simple the support to hand push notifications was going to be. In the end I decided on using applications framework which supports mobile and web using <a href=\"https://dart.dev/\">Dart</a>.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/zyrn_notifications/home_screen.png\"/>\n    <img src=\"/images/zyrn_notifications/settings_screen.png\"/>\n</div>\n<p>Now that my frontend was decided, I need a backend and database, for this I used <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://expressjs.com/\">Express.js</a> and <a href=\"https://www.sqlite.org/index.html\">SQLite3</a> as there is good support for using Google’s services in Node.js namely their push notifications via <a href=\"https://firebase.google.com/\">Firebase</a>. SQLite3 was a lightweight SQL database which I had heard of and wanted to try out for a small project such as this. Combined I built a simplistic REST API with authentication via pre-shared tokens. This meant I could be more relaxed on security as I did not have to setup a whole authentication system and carefully ensure that there were no SQL injection vulnerabilities as I could choose who I distributed access to.</p>\n<p>While working on this I was able to start learning Dart, a new language to me while making a basic application which allowed me to subscribe to be notified about various topics when required.</p>\n<p>Overall a great learning experience, if you are interested in getting access to <a href=\"https://play.google.com/store/apps/details?id=dev.zyrn.notifications\">the app</a> or checking out the source code make sure to contact me.</p>\n<p>I’ll see you again next month, until then happy coding!</p>\n"},{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"}]},{"name":"flutter","posts":[{"filename":"a-fluttering-experience","preview":"\nThis month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about build...","title":"A Fluttering Experience","date":"2020-11-18","author":"Zyrn","published":true,"tags":["mobile applications","flutter","dart","javascript","nodejs"],"content":"<style>\n    div.screenshot-image-view {\n        text-align: center;\n    }\n    div.screenshot-image-view img {\n        max-height: 600px;\n        padding: 2px;\n        border-radius: 40px;\n    }\n</style>\n<p>This month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about building an app to do schedule reminders for various things, by sending push notifications straight to my phone.</p>\n<p>To develop this, I first started looking at different tools, frameworks, and languages for mobile (Android) development. One of my main criteria for selection was how simple the support to hand push notifications was going to be. In the end I decided on using applications framework which supports mobile and web using <a href=\"https://dart.dev/\">Dart</a>.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/zyrn_notifications/home_screen.png\"/>\n    <img src=\"/images/zyrn_notifications/settings_screen.png\"/>\n</div>\n<p>Now that my frontend was decided, I need a backend and database, for this I used <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://expressjs.com/\">Express.js</a> and <a href=\"https://www.sqlite.org/index.html\">SQLite3</a> as there is good support for using Google’s services in Node.js namely their push notifications via <a href=\"https://firebase.google.com/\">Firebase</a>. SQLite3 was a lightweight SQL database which I had heard of and wanted to try out for a small project such as this. Combined I built a simplistic REST API with authentication via pre-shared tokens. This meant I could be more relaxed on security as I did not have to setup a whole authentication system and carefully ensure that there were no SQL injection vulnerabilities as I could choose who I distributed access to.</p>\n<p>While working on this I was able to start learning Dart, a new language to me while making a basic application which allowed me to subscribe to be notified about various topics when required.</p>\n<p>Overall a great learning experience, if you are interested in getting access to <a href=\"https://play.google.com/store/apps/details?id=dev.zyrn.notifications\">the app</a> or checking out the source code make sure to contact me.</p>\n<p>I’ll see you again next month, until then happy coding!</p>\n"},{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"}]},{"name":"web development","posts":[{"filename":"autumn-advances","preview":"In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.\nThe first thing I targeted was responsiveness of...","title":"Autumn Advances","date":"2021-04-24","author":"Zyrn","published":true,"tags":["web development","test driven development","CI-CD","development operations"],"content":"<p>In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.</p>\n<p>The first thing I targeted was responsiveness of the website. This was important as the old design was created with a mobile first-approach, but since the website wasn't responsive this didn't look good on desktop. So, I started by making the website responsive, with a clear separate layout for the desktop version. I achieved this by using <a href=\"https://www.npmjs.com/package/react-responsive\" title=\"NPM react-responsive\">react-responsive</a> which allows you to use CSS media queries as React.js hooks which I implemented in two different ways. Firstly, this method (inspired by <a href=\"https://github.com/benawad/dogehouse\" title=\"DogeHouse Github\">Ben Awad's DogeHouse</a>) allowed me display extra content in a second column if the viewport was large enough. Secondly, I reduced the width of page content relative to the viewport when the viewport was larger.</p>\n<p><img src=\"/images/autumn_advances/single_column.png\" alt=\"Mobile Layout\" title=\"Mobile Layout\">\n<img src=\"/images/autumn_advances/two_columns.png\" alt=\"Desktop Layout\" title=\"Desktop Layout\"></p>\n<p>The next major component I worked on was setting up a staging site. This was motivated by my desire to allow some of my friends to give feedback on some of my changes, before I pushed the code to production without requiring them to setup a development environment. To do this I added a staging/development CI/CD pipeline to deploy code to a <a href=\"https://staging.zyrn.dev\" title=\"Zyrn.Dev Staging Environment\">staging site</a>.</p>\n<p>While I was already updating the workflows for this project, I added automated builds &#x26; testing on all branches that didn't already have it. However, this process tended to be a bit too slow for a <a href=\"https://www.codecademy.com/articles/tdd-red-green-refactor\" title=\"Test-Driven Development: Red, Green, Refactor\">TDD Red, Green, Refactor</a> approach, so I added dependency caching to the build process. This allowed me to build the faster, more reliable, and consistent code.</p>\n<p><img src=\"https://content.codecademy.com/programs/tdd-js/articles/red-green-refactor-tdd.png\" alt=\"Red, Green, Refactor TDD\" title=\"Red, Green, Refactor\"></p>\n<p>Until next time, happy coding!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n        max-height: 25rem;\n    }\n</style>\n"},{"filename":"typescript-transitions","preview":"During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to TypeScript.\nTypeScript has many features which justified the effort required in the write, suc...","title":"Typescript Transitions","date":"2021-05-25","author":"Zyrn","published":true,"tags":["web development","typescript","refactoring"],"content":"<p>During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>.</p>\n<p><a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> has many features which justified the effort required in the write, such as the improved ability for code completion, intellisense, <a href=\"https://github.com/typescript-eslint/typescript-eslint\" title=\"Type Checking: TypeScript ESLint\">type checking</a>, and more thanks largely to the additional tooling available in most IDEs for <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>. These benefits allow me to write cleaner, more robust, easy to use code at a quicker pace.</p>\n<iframe width=\"560\" height=\"315\" margin=\"auto\" style=\"margin: auto; display: block;\" src=\"https://www.youtube-nocookie.com/embed/ydkQlJhodio\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Since <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is really just a super-set of JavaScript, I have been able to keep upwards of 80% of the codebase between for both languages. This greatly reduces the amount of work required to update and maintain the website when compared to switching the programming langauge or framework. Another key benefit is that <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is still compitable with Javascript, so I could have done a gradual transition from Javascript to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>, such as that done by <a href=\"https://slack.engineering/typescript-at-slack/\" title=\"Slack&#x27;s Transition to Typescript\">Slack</a>. I didn't end up doing this as my code base is still small enough that I was able to complete the transition in a couple of days.</p>\n<p>The actual transition involved adding and creating type definitions for all the libraries I have been using, both internal and external. In addition, I have also have been adding explict type declarions to all the functions and variables that I have been using, where possible.</p>\n<p>One example of how adding typescript changed my code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> allPostsData<span class=\"token punctuation\">,</span> isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TypeScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  allPostsData<span class=\"token punctuation\">,</span>\n  isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">allPostsData</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PostMetaData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  isUnreleased<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you can see, adding type annotations makes the code a little more verbose, but it also makes it easier to read, understand and use correctly. In this way, I have been able to significantly reduce the amount of work required to update and maintain the website by greatly improving the developer experience.</p>\n<p>That's all for this month, I hope you enjoyed it!\nUntil next time</p>\n"}]},{"name":"CI-CD","posts":[{"filename":"autumn-advances","preview":"In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.\nThe first thing I targeted was responsiveness of...","title":"Autumn Advances","date":"2021-04-24","author":"Zyrn","published":true,"tags":["web development","test driven development","CI-CD","development operations"],"content":"<p>In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.</p>\n<p>The first thing I targeted was responsiveness of the website. This was important as the old design was created with a mobile first-approach, but since the website wasn't responsive this didn't look good on desktop. So, I started by making the website responsive, with a clear separate layout for the desktop version. I achieved this by using <a href=\"https://www.npmjs.com/package/react-responsive\" title=\"NPM react-responsive\">react-responsive</a> which allows you to use CSS media queries as React.js hooks which I implemented in two different ways. Firstly, this method (inspired by <a href=\"https://github.com/benawad/dogehouse\" title=\"DogeHouse Github\">Ben Awad's DogeHouse</a>) allowed me display extra content in a second column if the viewport was large enough. Secondly, I reduced the width of page content relative to the viewport when the viewport was larger.</p>\n<p><img src=\"/images/autumn_advances/single_column.png\" alt=\"Mobile Layout\" title=\"Mobile Layout\">\n<img src=\"/images/autumn_advances/two_columns.png\" alt=\"Desktop Layout\" title=\"Desktop Layout\"></p>\n<p>The next major component I worked on was setting up a staging site. This was motivated by my desire to allow some of my friends to give feedback on some of my changes, before I pushed the code to production without requiring them to setup a development environment. To do this I added a staging/development CI/CD pipeline to deploy code to a <a href=\"https://staging.zyrn.dev\" title=\"Zyrn.Dev Staging Environment\">staging site</a>.</p>\n<p>While I was already updating the workflows for this project, I added automated builds &#x26; testing on all branches that didn't already have it. However, this process tended to be a bit too slow for a <a href=\"https://www.codecademy.com/articles/tdd-red-green-refactor\" title=\"Test-Driven Development: Red, Green, Refactor\">TDD Red, Green, Refactor</a> approach, so I added dependency caching to the build process. This allowed me to build the faster, more reliable, and consistent code.</p>\n<p><img src=\"https://content.codecademy.com/programs/tdd-js/articles/red-green-refactor-tdd.png\" alt=\"Red, Green, Refactor TDD\" title=\"Red, Green, Refactor\"></p>\n<p>Until next time, happy coding!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n        max-height: 25rem;\n    }\n</style>\n"},{"filename":"pipelines-CI-CD","preview":"Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using Github Actions. Along side these CI / CD additions I also mov...","title":"Pipelines: CI/CD","date":"2021-02-17","author":"Zyrn","published":true,"tags":["CI-CD","development operations","Github Actions","Raspberry Pi"],"content":"<p>Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using <a href=\"https://github.com/features/actions\" title=\"Github Actions Product Page\">Github Actions</a>. Along side these CI / CD additions I also moved the repository for this project to my main Github account.</p>\n<p><img src=\"/images/pipelines_ci_cd/actions_logs.png\" alt=\"Actions Log\" title=\"Github Actions History\"></p>\n<p>To start with I just setup basic CI which simply confirmed that PRs and commits to master branch would correctly install and build from a fresh setup. I then supplemented this with setting up a local Github actions runner for that repository which run on my <a href=\"https://github.com/appleboy/ssh-action\" title=\"Original SSH-Action Project by Appleboy on Github\">Raspberry Pi 4</a>, as my project is private on Github (allowing me unlimited monthly runtime for my actions). My next step was to build out the CD component, which I decided to use a simple SSH command for in combination with some <a href=\"https://www.raspberrypi.org/products/raspberry-pi-4-model-b\" title=\"Raspberry Pi Foundation&#x27;s Product Page\">Github secrets</a>.</p>\n<p><img src=\"https://assets.raspberrypi.com/static/raspberry-pi-4-labelled-e7f2e1d0bd4acdae2368c7ebd7b2028f.png\" alt=\"Raspberry Pi 4 Model B\" title=\"Raspberry Pi 4 Model B\"></p>\n<p>However, this design while simple ended up posing some rather annoying issues. The main issue I was encountering was the difficulty of connecting securely to another machine securely. After significant research I found this action on the Github marketplace called <a href=\"https://docs.github.com/en/actions/reference/encrypted-secrets\" title=\"Github Secrets Documentation\">SSH Action</a>. This library allows you to execute commands via SSH in a Github actions workflow. This is particularly useful as it means I do not have to change any of my existing deployment processes as I can simply automate my normal work exactly as it I do it manually.</p>\n<p>There was one small issue with this Github action, the docker image the bulk of the execution was done in was not available for all platforms, most importantly ARMv8/ARM64/AArch64 which I use in my 64-bit Raspberry Pi. Since <a href=\"https://github.com/appleboy\" title=\"Appleboy&#x27;s Github\">appleboy</a> provides it with a MIT license, so I forked it and substituted the problematic docker image for an equivalent one with ARM support.</p>\n<p><img src=\"/images/pipelines_ci_cd/ssh_action.png\" alt=\"SSH Remote Commands\" title=\"SSH Action\"></p>\n<p>With a bit more work I was able to add build dependency caching and a simple deployment activity. The process was simple just connect to the server, update the repository, install dependencies, lint, build, test, and switch to the new version. This workflow as simple as it is, has already saved me lots of time that would have been spent logging on to servers and running tests.</p>\n<p>Overall, I feel like while I have only taken another small dip into the DevOps world, I have learned a lot. This has encouraged me to try my hand are more things in this space. Potentially, I might setup a mock / staging server in the coming months.</p>\n<p>Until then keep learning!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n    }\n</style>\n"}]},{"name":"web","posts":[{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]},{"name":"language development","posts":[{"filename":"compilers-and-web-applications","preview":"Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a ...","title":"Compilers & Web-Applications","date":"2020-07-18","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","language development"],"content":"<p>Over the last month I have been working on a lot more offline projects specifically, I have been working on lexical analysis engines for a different use cases. Some examples of these are my own basic programming language, a low level assemble compiler for a virtual CPU and a query language for a distributed processing engine.</p>\n<p>These projects were mainly designed to practice my ability to solve some difficult string processing problems, esspically in Rust. Most of these attempts focused on the tokenising and building language trees, however, I am taking a on pausing these projects for the time being as I need to do some more work in learning the theory of these components. I have already started to read through the <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">'Dragon Book'</a>.</p>\n<p>Since I have hit a bit of a wall while trying to design and implement a compiler, I am currently working on building a basic web application template. This template system uses a variety of tools to allow me to get a brand-new idea ready for deployment much quicker. To build it I am using <a href=\"https://nextjs.org/\">Next.js</a> for the front-end and API, <a href=\"https://www.mongodb.com/\">MongoDB</a> for the data storage and <a href=\"https://auth0.com/\">Auth0</a> for user management and authentication.</p>\n<p>I am planning on using this template to build some admin dashboard and similar applications, and currently I have early version of this site available for testing on <strike><a href=\"https://admin.zyrn.dev\">admin.zyrn.dev</a></strike> (removed, contact <a href=\"mailto:mitch@zyrn.dev\">me</a> for a preview if desired). Additionally, during the last month I checked out a lot of other web applications and frameworks, with a significant amount of time used to setup a few different Django projects.</p>\n<p>As always, I look forward to seeing you in a month or so for my next development update!</p>\n"},{"filename":"say-what","preview":"For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.\nThis was a simple implementation of a language wh...","title":"Say What?","date":"2021-01-25","author":"Zyrn","published":true,"tags":["language development","rust","llvm"],"content":"<p>For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.</p>\n<p>This was a simple implementation of a language which I had only barely started lexing.\nThe only thing I can be proud of with that implementation was the fact that I used my own butcher form of EBNF document to define the language's syntax.\nAfter getting a rather ugly lexing system going I realised I had no clue what comes next.</p>\n<p>At this point I started searching for resources online which I could learn from.\nWith some help from a friend I was able to find <a href=\"https://craftinginterpreters.com/\">'Crafting Interpreters'</a> an electronic book by Bob Nystrom (<a href=\"https://twitter.com/intent/user?screen_name=munificentbob\">@munificentbob</a>).</p>\n<p>This book is an amazing resource and has allowed me to understand and build a whole language despite having next to no experience beforehand. So far, I have implemented lexing, parsing, a syntax tree, an execution environment and expression and statement evaluation.</p>\n<p>Additionally, while working through this book I have been working on my entirely separate language in Rust where I am working on the parsing phase.\nIdeally, I will be using <a href=\"https://llvm.org/\">LLVM</a> <a href=\"https://crates.io/crates/llvm-sys\">wrapper</a> for a compiler backend in list language so I am excited for that as I will get a programming language that might even be usable.</p>\n<p>Until then, wishing you a Happy New Year!</p>\n"}]},{"name":"refactoring","posts":[{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"},{"filename":"typescript-transitions","preview":"During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to TypeScript.\nTypeScript has many features which justified the effort required in the write, suc...","title":"Typescript Transitions","date":"2021-05-25","author":"Zyrn","published":true,"tags":["web development","typescript","refactoring"],"content":"<p>During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>.</p>\n<p><a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> has many features which justified the effort required in the write, such as the improved ability for code completion, intellisense, <a href=\"https://github.com/typescript-eslint/typescript-eslint\" title=\"Type Checking: TypeScript ESLint\">type checking</a>, and more thanks largely to the additional tooling available in most IDEs for <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>. These benefits allow me to write cleaner, more robust, easy to use code at a quicker pace.</p>\n<iframe width=\"560\" height=\"315\" margin=\"auto\" style=\"margin: auto; display: block;\" src=\"https://www.youtube-nocookie.com/embed/ydkQlJhodio\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Since <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is really just a super-set of JavaScript, I have been able to keep upwards of 80% of the codebase between for both languages. This greatly reduces the amount of work required to update and maintain the website when compared to switching the programming langauge or framework. Another key benefit is that <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is still compitable with Javascript, so I could have done a gradual transition from Javascript to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>, such as that done by <a href=\"https://slack.engineering/typescript-at-slack/\" title=\"Slack&#x27;s Transition to Typescript\">Slack</a>. I didn't end up doing this as my code base is still small enough that I was able to complete the transition in a couple of days.</p>\n<p>The actual transition involved adding and creating type definitions for all the libraries I have been using, both internal and external. In addition, I have also have been adding explict type declarions to all the functions and variables that I have been using, where possible.</p>\n<p>One example of how adding typescript changed my code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> allPostsData<span class=\"token punctuation\">,</span> isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TypeScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  allPostsData<span class=\"token punctuation\">,</span>\n  isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">allPostsData</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PostMetaData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  isUnreleased<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you can see, adding type annotations makes the code a little more verbose, but it also makes it easier to read, understand and use correctly. In this way, I have been able to significantly reduce the amount of work required to update and maintain the website by greatly improving the developer experience.</p>\n<p>That's all for this month, I hope you enjoyed it!\nUntil next time</p>\n"}]},{"name":"Advent of Code","posts":[{"filename":"a-coding-season","preview":"This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on Advent of Code 2020. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the pro...","title":"A Coding Season","date":"2020-12-19","author":"Zyrn","published":true,"tags":["Advent of Code","rust","data structures","algorithms"],"content":"<p>This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on <a href=https://adventofcode.com/2020>Advent of Code 2020</a>. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the progression.</p>\n<p>Each challenge can take anywhere from 20 minutes to a few hours to solve both parts of. This year I decided to take the challenge in <a href=\"https://www.rust-lang.org/\">Rust</a> which helped me to greatly gain a depth of knowledge in this language as I used many different data structures and algorithms.</p>\n<p>Rust allowed for some very clean solutions with both its advanced iterator support and operator overloading for structs (Rust's take on OOP).\nFor example, look at the simplicity of <a href=\"https://adventofcode.com/2020/day/3\">day 3</a>'s solutions with the structs and operator overloading removed.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>p<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>total<span class=\"token punctuation\">,</span> val<span class=\"token closure-punctuation punctuation\">|</span></span> total <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Grid</span><span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">{</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">%</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            counter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// println!(\"Char: {}, X: {}, Y: {}\", grid.map[pos.y][pos.x], pos.x, pos.y);</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    counter\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br></br>\nWhile other times, mutability issues and the minimum string manipulation tools resulted in string parsing looking like this unreadable and slow code taken from my <a href=\"https://adventofcode.com/2020/day/7\">day 7</a> solution:</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> bag<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// .map(|(style, list)| { style.clone().split_off(style.len()-5); (style, list.iter().map(|s| { s.split_off(s.len()-5); s }).collect::&#x3C;Vec&#x3C;&#x26;String>>()) })</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> style <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s <span class=\"token operator\">!=</span> <span class=\"token operator\">&#x26;</span><span class=\"token string\">\"no other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>style<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token function\">build_tree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>child<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">tree_contains</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shiny gold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Overall, this gave me a great opportunity to dive deeper into Rust and practice solve complex problems.</p>\n<p>Additionally, as you might have noticed in this post, I have added syntax highlighted code snippets to this website using <a href=\"https://prismjs.com/\">Prism.js</a>. So hopefully I will be able to do some post where I get into the details of my code a little more.</p>\n<p>See you next year with my January update!</p>\n"}]},{"name":"data structures","posts":[{"filename":"a-coding-season","preview":"This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on Advent of Code 2020. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the pro...","title":"A Coding Season","date":"2020-12-19","author":"Zyrn","published":true,"tags":["Advent of Code","rust","data structures","algorithms"],"content":"<p>This month has been mostly comprised of holiday preparation and lots of time doing my daily challenge on <a href=https://adventofcode.com/2020>Advent of Code 2020</a>. This advent challenge gives you a sequence of challenges each harder than the last to do from December 1st until Christmas Day, providing a coherent story to drive the progression.</p>\n<p>Each challenge can take anywhere from 20 minutes to a few hours to solve both parts of. This year I decided to take the challenge in <a href=\"https://www.rust-lang.org/\">Rust</a> which helped me to greatly gain a depth of knowledge in this language as I used many different data structures and algorithms.</p>\n<p>Rust allowed for some very clean solutions with both its advanced iterator support and operator overloading for structs (Rust's take on OOP).\nFor example, look at the simplicity of <a href=\"https://adventofcode.com/2020/day/3\">day 3</a>'s solutions with the structs and operator overloading removed.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>p<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>map<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of trees: {}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>total<span class=\"token punctuation\">,</span> val<span class=\"token closure-punctuation punctuation\">|</span></span> total <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Grid</span><span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">{</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">%</span> grid<span class=\"token punctuation\">.</span>dimensions<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            counter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// println!(\"Char: {}, X: {}, Y: {}\", grid.map[pos.y][pos.x], pos.x, pos.y);</span>\n        pos <span class=\"token operator\">=</span> pos <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    counter\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br></br>\nWhile other times, mutability issues and the minimum string manipulation tools resulted in string parsing looking like this unreadable and slow code taken from my <a href=\"https://adventofcode.com/2020/day/7\">day 7</a> solution:</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> bag<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>bag<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// .map(|(style, list)| { style.clone().split_off(style.len()-5); (style, list.iter().map(|s| { s.split_off(s.len()-5); s }).collect::&#x3C;Vec&#x3C;&#x26;String>>()) })</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> style <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token punctuation\">.</span><span class=\"token function\">split_off</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>style <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s <span class=\"token operator\">!=</span> <span class=\"token operator\">&#x26;</span><span class=\"token string\">\"no other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> rules<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>style<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>style<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> items <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token function\">build_tree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>child<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">tree_contains</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shiny gold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Overall, this gave me a great opportunity to dive deeper into Rust and practice solve complex problems.</p>\n<p>Additionally, as you might have noticed in this post, I have added syntax highlighted code snippets to this website using <a href=\"https://prismjs.com/\">Prism.js</a>. So hopefully I will be able to do some post where I get into the details of my code a little more.</p>\n<p>See you next year with my January update!</p>\n"}]},{"name":"dart","posts":[{"filename":"a-fluttering-experience","preview":"\nThis month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about build...","title":"A Fluttering Experience","date":"2020-11-18","author":"Zyrn","published":true,"tags":["mobile applications","flutter","dart","javascript","nodejs"],"content":"<style>\n    div.screenshot-image-view {\n        text-align: center;\n    }\n    div.screenshot-image-view img {\n        max-height: 600px;\n        padding: 2px;\n        border-radius: 40px;\n    }\n</style>\n<p>This month there were several changes I wanted to make to my daily habits, such as getting back into a good physical workout routine. One of my main problems previously was I only kept up my new workout routine for a few weeks before I would stop again. So, seeing this problem I went about building an app to do schedule reminders for various things, by sending push notifications straight to my phone.</p>\n<p>To develop this, I first started looking at different tools, frameworks, and languages for mobile (Android) development. One of my main criteria for selection was how simple the support to hand push notifications was going to be. In the end I decided on using applications framework which supports mobile and web using <a href=\"https://dart.dev/\">Dart</a>.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/zyrn_notifications/home_screen.png\"/>\n    <img src=\"/images/zyrn_notifications/settings_screen.png\"/>\n</div>\n<p>Now that my frontend was decided, I need a backend and database, for this I used <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://expressjs.com/\">Express.js</a> and <a href=\"https://www.sqlite.org/index.html\">SQLite3</a> as there is good support for using Google’s services in Node.js namely their push notifications via <a href=\"https://firebase.google.com/\">Firebase</a>. SQLite3 was a lightweight SQL database which I had heard of and wanted to try out for a small project such as this. Combined I built a simplistic REST API with authentication via pre-shared tokens. This meant I could be more relaxed on security as I did not have to setup a whole authentication system and carefully ensure that there were no SQL injection vulnerabilities as I could choose who I distributed access to.</p>\n<p>While working on this I was able to start learning Dart, a new language to me while making a basic application which allowed me to subscribe to be notified about various topics when required.</p>\n<p>Overall a great learning experience, if you are interested in getting access to <a href=\"https://play.google.com/store/apps/details?id=dev.zyrn.notifications\">the app</a> or checking out the source code make sure to contact me.</p>\n<p>I’ll see you again next month, until then happy coding!</p>\n"}]},{"name":"test driven development","posts":[{"filename":"autumn-advances","preview":"In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.\nThe first thing I targeted was responsiveness of...","title":"Autumn Advances","date":"2021-04-24","author":"Zyrn","published":true,"tags":["web development","test driven development","CI-CD","development operations"],"content":"<p>In the past month I have been reasonably busy, so I didn't start a new project for once, and instead I just worked on my website a bit more. Most of my work revolved around refining what I already had and improving the development workflow further.</p>\n<p>The first thing I targeted was responsiveness of the website. This was important as the old design was created with a mobile first-approach, but since the website wasn't responsive this didn't look good on desktop. So, I started by making the website responsive, with a clear separate layout for the desktop version. I achieved this by using <a href=\"https://www.npmjs.com/package/react-responsive\" title=\"NPM react-responsive\">react-responsive</a> which allows you to use CSS media queries as React.js hooks which I implemented in two different ways. Firstly, this method (inspired by <a href=\"https://github.com/benawad/dogehouse\" title=\"DogeHouse Github\">Ben Awad's DogeHouse</a>) allowed me display extra content in a second column if the viewport was large enough. Secondly, I reduced the width of page content relative to the viewport when the viewport was larger.</p>\n<p><img src=\"/images/autumn_advances/single_column.png\" alt=\"Mobile Layout\" title=\"Mobile Layout\">\n<img src=\"/images/autumn_advances/two_columns.png\" alt=\"Desktop Layout\" title=\"Desktop Layout\"></p>\n<p>The next major component I worked on was setting up a staging site. This was motivated by my desire to allow some of my friends to give feedback on some of my changes, before I pushed the code to production without requiring them to setup a development environment. To do this I added a staging/development CI/CD pipeline to deploy code to a <a href=\"https://staging.zyrn.dev\" title=\"Zyrn.Dev Staging Environment\">staging site</a>.</p>\n<p>While I was already updating the workflows for this project, I added automated builds &#x26; testing on all branches that didn't already have it. However, this process tended to be a bit too slow for a <a href=\"https://www.codecademy.com/articles/tdd-red-green-refactor\" title=\"Test-Driven Development: Red, Green, Refactor\">TDD Red, Green, Refactor</a> approach, so I added dependency caching to the build process. This allowed me to build the faster, more reliable, and consistent code.</p>\n<p><img src=\"https://content.codecademy.com/programs/tdd-js/articles/red-green-refactor-tdd.png\" alt=\"Red, Green, Refactor TDD\" title=\"Red, Green, Refactor\"></p>\n<p>Until next time, happy coding!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n        max-height: 25rem;\n    }\n</style>\n"}]},{"name":"cloud","posts":[{"filename":"migration","preview":"It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with OVH as I talked about in my last post.\nThis new ...","title":"Migration - We're Live!","date":"2020-06-20","author":"Zyrn","published":true,"tags":["cloud","nginx","development operations","react"],"content":"<p>It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with <a href=\"https://www.ovh.com/\">OVH</a> as I talked about in my last post.</p>\n<p>This new server required significant setup before I could deploy to it. One key task was to setup a SSH connection and then install and configure <a href=\"https://www.nginx.com\">Nginx</a> as both a static file server and a reverse proxy. Once I had optimised the settings for my CDN (Content Delivery Network) I was read to deploy and change my DNS records to point to the newly deployed site.</p>\n<p>After a week after I switched sites, I decided to port some of the old site's functionality across as I haven't had any major issues yet.\nTo begin with I have ported across my file server which allows me to easily share files and bypass upload restrictions. I have currently got all the functionality there for the file server, but it still needs to be revisited as some of the UI is not clear and clean.</p>\n<p>I will be working hard until next time to give you all another update!</p>\n"}]},{"name":"nginx","posts":[{"filename":"migration","preview":"It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with OVH as I talked about in my last post.\nThis new ...","title":"Migration - We're Live!","date":"2020-06-20","author":"Zyrn","published":true,"tags":["cloud","nginx","development operations","react"],"content":"<p>It has been over a month since my last post and there is a lot of changes to share. Recently I finally made the jump to using this Next.js website as my main production website. This was a big leap as I was also deploying to a new cloud server with <a href=\"https://www.ovh.com/\">OVH</a> as I talked about in my last post.</p>\n<p>This new server required significant setup before I could deploy to it. One key task was to setup a SSH connection and then install and configure <a href=\"https://www.nginx.com\">Nginx</a> as both a static file server and a reverse proxy. Once I had optimised the settings for my CDN (Content Delivery Network) I was read to deploy and change my DNS records to point to the newly deployed site.</p>\n<p>After a week after I switched sites, I decided to port some of the old site's functionality across as I haven't had any major issues yet.\nTo begin with I have ported across my file server which allows me to easily share files and bypass upload restrictions. I have currently got all the functionality there for the file server, but it still needs to be revisited as some of the UI is not clear and clean.</p>\n<p>I will be working hard until next time to give you all another update!</p>\n"}]},{"name":"Github Actions","posts":[{"filename":"pipelines-CI-CD","preview":"Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using Github Actions. Along side these CI / CD additions I also mov...","title":"Pipelines: CI/CD","date":"2021-02-17","author":"Zyrn","published":true,"tags":["CI-CD","development operations","Github Actions","Raspberry Pi"],"content":"<p>Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using <a href=\"https://github.com/features/actions\" title=\"Github Actions Product Page\">Github Actions</a>. Along side these CI / CD additions I also moved the repository for this project to my main Github account.</p>\n<p><img src=\"/images/pipelines_ci_cd/actions_logs.png\" alt=\"Actions Log\" title=\"Github Actions History\"></p>\n<p>To start with I just setup basic CI which simply confirmed that PRs and commits to master branch would correctly install and build from a fresh setup. I then supplemented this with setting up a local Github actions runner for that repository which run on my <a href=\"https://github.com/appleboy/ssh-action\" title=\"Original SSH-Action Project by Appleboy on Github\">Raspberry Pi 4</a>, as my project is private on Github (allowing me unlimited monthly runtime for my actions). My next step was to build out the CD component, which I decided to use a simple SSH command for in combination with some <a href=\"https://www.raspberrypi.org/products/raspberry-pi-4-model-b\" title=\"Raspberry Pi Foundation&#x27;s Product Page\">Github secrets</a>.</p>\n<p><img src=\"https://assets.raspberrypi.com/static/raspberry-pi-4-labelled-e7f2e1d0bd4acdae2368c7ebd7b2028f.png\" alt=\"Raspberry Pi 4 Model B\" title=\"Raspberry Pi 4 Model B\"></p>\n<p>However, this design while simple ended up posing some rather annoying issues. The main issue I was encountering was the difficulty of connecting securely to another machine securely. After significant research I found this action on the Github marketplace called <a href=\"https://docs.github.com/en/actions/reference/encrypted-secrets\" title=\"Github Secrets Documentation\">SSH Action</a>. This library allows you to execute commands via SSH in a Github actions workflow. This is particularly useful as it means I do not have to change any of my existing deployment processes as I can simply automate my normal work exactly as it I do it manually.</p>\n<p>There was one small issue with this Github action, the docker image the bulk of the execution was done in was not available for all platforms, most importantly ARMv8/ARM64/AArch64 which I use in my 64-bit Raspberry Pi. Since <a href=\"https://github.com/appleboy\" title=\"Appleboy&#x27;s Github\">appleboy</a> provides it with a MIT license, so I forked it and substituted the problematic docker image for an equivalent one with ARM support.</p>\n<p><img src=\"/images/pipelines_ci_cd/ssh_action.png\" alt=\"SSH Remote Commands\" title=\"SSH Action\"></p>\n<p>With a bit more work I was able to add build dependency caching and a simple deployment activity. The process was simple just connect to the server, update the repository, install dependencies, lint, build, test, and switch to the new version. This workflow as simple as it is, has already saved me lots of time that would have been spent logging on to servers and running tests.</p>\n<p>Overall, I feel like while I have only taken another small dip into the DevOps world, I have learned a lot. This has encouraged me to try my hand are more things in this space. Potentially, I might setup a mock / staging server in the coming months.</p>\n<p>Until then keep learning!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n    }\n</style>\n"}]},{"name":"Raspberry Pi","posts":[{"filename":"pipelines-CI-CD","preview":"Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using Github Actions. Along side these CI / CD additions I also mov...","title":"Pipelines: CI/CD","date":"2021-02-17","author":"Zyrn","published":true,"tags":["CI-CD","development operations","Github Actions","Raspberry Pi"],"content":"<p>Once again, this month entailed many new and interesting challenges, tools, and techniques for me to learn to work with. The biggest of these this month was to learn how to automate some of my development and deployment workflows using <a href=\"https://github.com/features/actions\" title=\"Github Actions Product Page\">Github Actions</a>. Along side these CI / CD additions I also moved the repository for this project to my main Github account.</p>\n<p><img src=\"/images/pipelines_ci_cd/actions_logs.png\" alt=\"Actions Log\" title=\"Github Actions History\"></p>\n<p>To start with I just setup basic CI which simply confirmed that PRs and commits to master branch would correctly install and build from a fresh setup. I then supplemented this with setting up a local Github actions runner for that repository which run on my <a href=\"https://github.com/appleboy/ssh-action\" title=\"Original SSH-Action Project by Appleboy on Github\">Raspberry Pi 4</a>, as my project is private on Github (allowing me unlimited monthly runtime for my actions). My next step was to build out the CD component, which I decided to use a simple SSH command for in combination with some <a href=\"https://www.raspberrypi.org/products/raspberry-pi-4-model-b\" title=\"Raspberry Pi Foundation&#x27;s Product Page\">Github secrets</a>.</p>\n<p><img src=\"https://assets.raspberrypi.com/static/raspberry-pi-4-labelled-e7f2e1d0bd4acdae2368c7ebd7b2028f.png\" alt=\"Raspberry Pi 4 Model B\" title=\"Raspberry Pi 4 Model B\"></p>\n<p>However, this design while simple ended up posing some rather annoying issues. The main issue I was encountering was the difficulty of connecting securely to another machine securely. After significant research I found this action on the Github marketplace called <a href=\"https://docs.github.com/en/actions/reference/encrypted-secrets\" title=\"Github Secrets Documentation\">SSH Action</a>. This library allows you to execute commands via SSH in a Github actions workflow. This is particularly useful as it means I do not have to change any of my existing deployment processes as I can simply automate my normal work exactly as it I do it manually.</p>\n<p>There was one small issue with this Github action, the docker image the bulk of the execution was done in was not available for all platforms, most importantly ARMv8/ARM64/AArch64 which I use in my 64-bit Raspberry Pi. Since <a href=\"https://github.com/appleboy\" title=\"Appleboy&#x27;s Github\">appleboy</a> provides it with a MIT license, so I forked it and substituted the problematic docker image for an equivalent one with ARM support.</p>\n<p><img src=\"/images/pipelines_ci_cd/ssh_action.png\" alt=\"SSH Remote Commands\" title=\"SSH Action\"></p>\n<p>With a bit more work I was able to add build dependency caching and a simple deployment activity. The process was simple just connect to the server, update the repository, install dependencies, lint, build, test, and switch to the new version. This workflow as simple as it is, has already saved me lots of time that would have been spent logging on to servers and running tests.</p>\n<p>Overall, I feel like while I have only taken another small dip into the DevOps world, I have learned a lot. This has encouraged me to try my hand are more things in this space. Potentially, I might setup a mock / staging server in the coming months.</p>\n<p>Until then keep learning!</p>\n<style>\n    article img {\n        display: block;\n        margin: auto;\n        max-width: 100%;\n    }\n</style>\n"}]},{"name":"python","posts":[{"filename":"ray-tracing","preview":"\nJust a quick note beforehand, I didn’t write up this post when I was working on this, so I have actually back dated this post to when I was working on it.\nSo another month has gone by and you must be wondering what have I been doing in all that time?\nRaytracing.\nWhat does that look like?\nIt look...","title":"Simple Ray Tracing","date":"2020-08-14","author":"Zyrn","published":true,"tags":["python","computer graphics","algorithms"],"content":"<style>\n    div.screenshot-image-view {\n        display: flex !important;\n        flex-direction: row;\n        flex-wrap: wrap;\n        align-items: stretch;\n        justify-content: center;\n        text-align: center;\n    }\n    \n    div.screenshot-image-view img {\n        max-width: 48%;\n        min-width: 350px;\n        padding: 2px;\n        border-radius: 10px;\n    }\n</style>\n<p>Just a quick note beforehand, I didn’t write up this post when I was working on this, so I have actually back dated this post to when I was working on it.</p>\n<p>So another month has gone by and you must be wondering what have I been doing in all that time?</p>\n<p><strong>Raytracing.</strong></p>\n<p>What does that look like?<br/>\nIt looks like this.</p>\n<img src=\"/images/ray_tracing/full_scene_4000x2000_100spp.png\" style=\"width: 100%; border-radius: 50px;\"/>\n<p>Now hopefully, after looking at that you think that it is as awesome as I thought it was seeing it the first time. Luckily, this was one of my projects I was able to work with a friend on. Together we worked through an amazing free book by Peter Shirley called <a href=\"https://raytracing.github.io/books/RayTracingInOneWeekend.html\">‘Ray Tracing in One Weekend’</a>. Following this tutorial we got a very simple tracing simulation going in Python in just one weekend as advertised. Once we completed this I did a bunch of renders of various scenes, so here are some final pictures and pictures from development.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/ray_tracing/ray_collisions.jpg\"/>\n    <img src=\"/images/ray_tracing/scenes.png\"/>\n    <img src=\"/images/ray_tracing/shadows_no_aa.png\"/>\n    <img src=\"/images/ray_tracing/materials_and_aa.png\"/>\n</div>\n<p>The main issue with this version of our ray tracing is it was very slow so I have just started to work on an implementation for the browser using WebGL to get utilize GPU compute for this expensive workload.\n<br/> (Reminder you can open the images to get a full size render)</p>\n<p>Once again stay tuned for next month’s update!</p>\n"}]},{"name":"computer graphics","posts":[{"filename":"ray-tracing","preview":"\nJust a quick note beforehand, I didn’t write up this post when I was working on this, so I have actually back dated this post to when I was working on it.\nSo another month has gone by and you must be wondering what have I been doing in all that time?\nRaytracing.\nWhat does that look like?\nIt look...","title":"Simple Ray Tracing","date":"2020-08-14","author":"Zyrn","published":true,"tags":["python","computer graphics","algorithms"],"content":"<style>\n    div.screenshot-image-view {\n        display: flex !important;\n        flex-direction: row;\n        flex-wrap: wrap;\n        align-items: stretch;\n        justify-content: center;\n        text-align: center;\n    }\n    \n    div.screenshot-image-view img {\n        max-width: 48%;\n        min-width: 350px;\n        padding: 2px;\n        border-radius: 10px;\n    }\n</style>\n<p>Just a quick note beforehand, I didn’t write up this post when I was working on this, so I have actually back dated this post to when I was working on it.</p>\n<p>So another month has gone by and you must be wondering what have I been doing in all that time?</p>\n<p><strong>Raytracing.</strong></p>\n<p>What does that look like?<br/>\nIt looks like this.</p>\n<img src=\"/images/ray_tracing/full_scene_4000x2000_100spp.png\" style=\"width: 100%; border-radius: 50px;\"/>\n<p>Now hopefully, after looking at that you think that it is as awesome as I thought it was seeing it the first time. Luckily, this was one of my projects I was able to work with a friend on. Together we worked through an amazing free book by Peter Shirley called <a href=\"https://raytracing.github.io/books/RayTracingInOneWeekend.html\">‘Ray Tracing in One Weekend’</a>. Following this tutorial we got a very simple tracing simulation going in Python in just one weekend as advertised. Once we completed this I did a bunch of renders of various scenes, so here are some final pictures and pictures from development.</p>\n<div class=\"screenshot-image-view\">\n    <img src=\"/images/ray_tracing/ray_collisions.jpg\"/>\n    <img src=\"/images/ray_tracing/scenes.png\"/>\n    <img src=\"/images/ray_tracing/shadows_no_aa.png\"/>\n    <img src=\"/images/ray_tracing/materials_and_aa.png\"/>\n</div>\n<p>The main issue with this version of our ray tracing is it was very slow so I have just started to work on an implementation for the browser using WebGL to get utilize GPU compute for this expensive workload.\n<br/> (Reminder you can open the images to get a full size render)</p>\n<p>Once again stay tuned for next month’s update!</p>\n"}]},{"name":"data modelling","posts":[{"filename":"refactor-hell","preview":"Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in this article.\nThe largest change on all was a complete overhaul of the backend architecture, which was centered around the ...","title":"Refactor Hell","date":"2021-03-16","author":"Zyrn","published":true,"tags":["refactoring","data modelling","javascript","flutter","mobile applications"],"content":"<p>Once again, this month I revisited an old project and improved it. This project was the notifications app I developed in November last year, which I discussed at the time in <a href=\"/blog/a-fluttering-experience\" title=\"November 2020 Flutter Notification App\">this article</a>.</p>\n<p>The largest change on all was a complete overhaul of the backend architecture, which was centered around the change for a singular <a href=\"https://www.sqlite.org/\" title=\"SQLite\">SQLite</a> database on deployed server to using Google Firebase's <a href=\"https://firebase.google.com/products/firestore\" title=\"Google Cloud Firestore\">Firestore</a>, offering a host of benefits such as:</p>\n<ul>\n<li>Cloud Data Redundancy</li>\n<li>Security (SQL injection style vulnerabilities)</li>\n<li>Scalability</li>\n<li>Increase Maintainability (no need for a RESTful API)</li>\n</ul>\n<p>This change in database and also <a href=\"https://en.wikipedia.org/wiki/Database_model\" title=\"Database Paradigms\">database paradigm</a>, also resulted in a much more manageable code base as I switched from a loose imperative coding style to an object oriented design which more closely matched the document style database.\nThis meant there were a lot less confusing and poorly design bits of code as there was a clear data model of which the class models could imitate.</p>\n<p>The removal of the RESTful API was particularly nice as it was poorly structured, using no extra layers of abstraction from the minimalistic design of <a href=\"https://expressjs.com/\" title=\"Express.js\">Express.js</a>.\nOne example of this poor code quality was the heavy use of try-catches around a single line of code or using await without any error handling.</p>\n<h3>An example of poor asynchronous code and error handling</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// routes/topic.js (API endpoint for handling subscriptions to topics)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>   \n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMemberGroups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal Server Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromGroup</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>An example of event based programming, which is not subject to some errors which async / await introduced.</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/Jobs.js (controller for issusing notifications)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ref</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">querySnapshot</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    querySnapshot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">docChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">change</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'added'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'modified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSubscribed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">registerJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'removed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">jobs</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deregisterJob</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span><span class=\"token property-access\">doc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result of this change on database, I also upgraded the security of the authentication within the system, moving from manually issues API tokens, to more secure, flexible, and accessible tokens issued using <a href=\"https://firebase.google.com/products/auth\" title=\"Google Firebase Authentication\">Google Firebase Auth</a>.</p>\n<p>These major changes in the backend, meant the frontend needed a significant re-write. I used this opportunity to upgrade to <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\" title=\"Flutter 2 Announcement\">Flutter 2</a>, using <a href=\"https://flutter.dev/docs/null-safety\" title=\"Null Safety\">null safety</a>.</p>\n"}]},{"name":"llvm","posts":[{"filename":"say-what","preview":"For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.\nThis was a simple implementation of a language wh...","title":"Say What?","date":"2021-01-25","author":"Zyrn","published":true,"tags":["language development","rust","llvm"],"content":"<p>For me, this month has had a big focus on languages, compilers, and eco-systems.\nTo start with I returned and old language project, where I was trying to build a language with no experience, no examples, no textbooks and no idea what was involved.</p>\n<p>This was a simple implementation of a language which I had only barely started lexing.\nThe only thing I can be proud of with that implementation was the fact that I used my own butcher form of EBNF document to define the language's syntax.\nAfter getting a rather ugly lexing system going I realised I had no clue what comes next.</p>\n<p>At this point I started searching for resources online which I could learn from.\nWith some help from a friend I was able to find <a href=\"https://craftinginterpreters.com/\">'Crafting Interpreters'</a> an electronic book by Bob Nystrom (<a href=\"https://twitter.com/intent/user?screen_name=munificentbob\">@munificentbob</a>).</p>\n<p>This book is an amazing resource and has allowed me to understand and build a whole language despite having next to no experience beforehand. So far, I have implemented lexing, parsing, a syntax tree, an execution environment and expression and statement evaluation.</p>\n<p>Additionally, while working through this book I have been working on my entirely separate language in Rust where I am working on the parsing phase.\nIdeally, I will be using <a href=\"https://llvm.org/\">LLVM</a> <a href=\"https://crates.io/crates/llvm-sys\">wrapper</a> for a compiler backend in list language so I am excited for that as I will get a programming language that might even be usable.</p>\n<p>Until then, wishing you a Happy New Year!</p>\n"}]},{"name":"typescript","posts":[{"filename":"typescript-transitions","preview":"During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to TypeScript.\nTypeScript has many features which justified the effort required in the write, suc...","title":"Typescript Transitions","date":"2021-05-25","author":"Zyrn","published":true,"tags":["web development","typescript","refactoring"],"content":"<p>During this last month I have managed to push through a lot of updates to this website, most of which you can't even see. This is because I took on a a huge refactoring task to port the whole website to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>.</p>\n<p><a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> has many features which justified the effort required in the write, such as the improved ability for code completion, intellisense, <a href=\"https://github.com/typescript-eslint/typescript-eslint\" title=\"Type Checking: TypeScript ESLint\">type checking</a>, and more thanks largely to the additional tooling available in most IDEs for <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>. These benefits allow me to write cleaner, more robust, easy to use code at a quicker pace.</p>\n<iframe width=\"560\" height=\"315\" margin=\"auto\" style=\"margin: auto; display: block;\" src=\"https://www.youtube-nocookie.com/embed/ydkQlJhodio\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Since <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is really just a super-set of JavaScript, I have been able to keep upwards of 80% of the codebase between for both languages. This greatly reduces the amount of work required to update and maintain the website when compared to switching the programming langauge or framework. Another key benefit is that <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a> is still compitable with Javascript, so I could have done a gradual transition from Javascript to <a href=\"https://www.typescriptlang.org/\" title=\"Typescript&#x27;s Official Site\">TypeScript</a>, such as that done by <a href=\"https://slack.engineering/typescript-at-slack/\" title=\"Slack&#x27;s Transition to Typescript\">Slack</a>. I didn't end up doing this as my code base is still small enough that I was able to complete the transition in a couple of days.</p>\n<p>The actual transition involved adding and creating type definitions for all the libraries I have been using, both internal and external. In addition, I have also have been adding explict type declarions to all the functions and variables that I have been using, where possible.</p>\n<p>One example of how adding typescript changed my code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> allPostsData<span class=\"token punctuation\">,</span> isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TypeScript</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Posts</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  allPostsData<span class=\"token punctuation\">,</span>\n  isUnreleased <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">allPostsData</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PostMetaData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  isUnreleased<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example JSX body for this function</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">PostJSX</span> \n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPostsData<span class=\"token punctuation\">}</span>\n        isUnreleased<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isUnreleased<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* use the data */</span><span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you can see, adding type annotations makes the code a little more verbose, but it also makes it easier to read, understand and use correctly. In this way, I have been able to significantly reduce the amount of work required to update and maintain the website by greatly improving the developer experience.</p>\n<p>That's all for this month, I hope you enjoyed it!\nUntil next time</p>\n"}]},{"name":"graphql","posts":[{"filename":"web-apps-in-a-box","preview":"It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.\nSince I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of....","title":"Web Applications in a Box","date":"2020-10-26","author":"Zyrn","published":true,"tags":["web","javascript","react","nodejs","rust","docker","graphql"],"content":"<p>It has been a bit over a month since my last post and I have managed to get some good progress on some new projects.</p>\n<p>Since I last made a post, I have put a few more hours into my language, but since progress was slow I decided to tackle a task which I could make quick progress in and be proud of. One the main goals for this project was to design an application using the docker ecosystem and build it entirely in docker containers. For now I will be sticking to design architectures I am more comfortable with splitting the functionality into a UI layer (Next.js w/React), Business Logic Layer (Express.js, Passport.js, etc) and a data layer (MongoDB, GraphQL, Apollo, etc) rather than trying to branch out to a more heavily micro-services based architecture.</p>\n<p>As I alluded to earlier, I was trying to quick progress on this project rather than building everything by hand, so my tech list reads a bit like current treads buzzword list.</p>\n<p><strong>Front End</strong></p>\n<ul>\n<li>Next.js</li>\n<li>React.js</li>\n<li>Apollo (GraphQL Client)</li>\n</ul>\n<p><strong>Back End</strong></p>\n<ul>\n<li>Express.js</li>\n<li>Passport.js (authentication)</li>\n<li>NodeMailer.js (mail)</li>\n<li>Mongoose.js (database client)</li>\n<li>Express-GraphQL (GraphQL server)</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>MongoDB</li>\n<li>Apollo (client-side caching)</li>\n<li>GraphQL (schema &#x26; query design)</li>\n</ul>\n<p><strong>Management</strong></p>\n<ul>\n<li>Nginx (Web Server)</li>\n<li>Mongo Express (Database Web Client)</li>\n</ul>\n<p>This project was designed to be a base application for various purposes so as such it has a generic front-end template and the ability so simply add more data and functionality on the back-end. The database is highly flexibly too. In addition to these design choices I have added features to assist with user management, identification, authorisation and well as emailing. Furthermore, I have allowed many settings to be customised at environment to allow for a single application to be setup for many different clients with no changes to the codebase.</p>\n<p>If you are interest in seeing what I currently have check out an example page <a href=\"https://example.zyrn.dev\">here</a>. Also, you will probably here a bit more about this project in the future as I have a client for whom I will be using this framework to develop their solution. This will help me better flesh out the core features for this framework.</p>\n<p>I hope to have tons of cool stuff to share next month, so until then I will be working hard on this.</p>\n"}]}]},"__N_SSG":true}